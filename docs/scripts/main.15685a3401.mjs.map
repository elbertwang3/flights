{"version":3,"sources":["webpack:///./config/modern-polyfills.js","webpack:///./app/scripts/utils/load-script.js","webpack:///./app/scripts/embeds/pym.js","webpack:///./app/scripts/map.js","webpack:///./app/scripts/packs/main.js","webpack:///./app/scripts/utils/debounce.js"],"names":["require","loadScript","url","Promise","resolve","reject","script","document","createElement","src","async","onload","onerror","body","appendChild","PYM_SRC_URL","d3","prototype","map","options","charts","this","nodes","el","$sel","data","datum","usairports","forEach","d","incoming","outgoing","flights","iata","Map","IATA","usroutes","route","source","get","ORIGIN","target","DEST","COUPONS","airportsgeojson","airport","type","properties","geometry","coordinates","Longitude","Latitude","width","height","hypotenuse","radiusScale","$svg","$axis","$vis","airports","airportG","flight","voronoiLayer","canvas","context","projection","canvasPath","svgPath","polygons","geoVoronoi","line","curve","x","y","Chart","init","$g","append","node","getContext","attr","concat","resize","render","offsetWidth","offsetHeight","Math","sqrt","outgoingMax","domain","range","scale","translate","coords","clearRect","beginPath","topojson","mapData","objects","states","fillStyle","fill","a","b","lineWidth","strokeStyle","stroke","selectAll","join","each","bubble","features","on","site","classed","raise","OPERATING_CARRIER","push","val","arguments","length","pop","__webpack_require__","__webpack_exports__","renderGraphic","container","select","clearContainer","html","getFrameWidth","routes","origins","console","log","destinations","mapChart","carrier","origin","destination","selectedRoutes","possibleOrigins","possibleDestinations","possibleAirports","blankAirport","Name","City","pymChild","window","addEventListener","debounce","fn","pym","Child","getPymChild","debouncedFn","func","sendHeight","wait","later","last","Date","now","timestamp","timeout","setTimeout","immediate","result","apply","args","callNow","pymLoader","catch","error","cardDropdown","getElementById","carrierDropdown","originDropdown","destinationDropdown","event","value","filter","Set","includes","enter","text","update","exit","remove"],"mappings":"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","file":"main.15685a3401.mjs","sourcesContent":["'use strict';\n\n// We depend on intersection-observer enough that it should just be assumed as necessary\nrequire('intersection-observer');\n","/**\n * A helper for asynchronously loading scripts.\n *\n * Provides a Promise interface for passing a function that will only be called\n * if the script is successfully added to the page.\n *\n * @private\n * @param {String} url The URL for the script to be loaded.\n * @returns {Promise}\n * @example\n *\n * loadScript('backup.js').then(() => {\n *   // anything that depends on that script loading\n * });\n */\nfunction loadScript(url) {\n  return new Promise((resolve, reject) => {\n    // create the `script` element\n    const script = document.createElement('script');\n\n    // set its URL\n    script.src = url;\n\n    // should always be async\n    script.async = true;\n\n    // resolve the Promise on load\n    script.onload = resolve;\n\n    // reject the Promise if there is an error\n    script.onerror = reject;\n\n    // attach the script to the document body\n    document.body.appendChild(script);\n  });\n}\n\nexport default loadScript;\n","/* global pym */\n\n// local\nimport debounce from '../utils/debounce';\nimport loadScript from '../utils/load-script';\n\nconst PYM_SRC_URL = 'https://pym.nprapps.org/pym.v1.min.js';\n\n/**\n * Load the Pym.js script and return a new instance of pym.Child.\n *\n * @returns {Promise<object>}\n */\nasync function getPymChild() {\n  await loadScript(PYM_SRC_URL);\n\n  return new pym.Child();\n}\n\n/**\n * A wrapper around loading Pym.js async and hooking up the callback\n * function, if provided.\n *\n * @param {Function} [fn] an optional render function to be hooked into Pym.js\n * @returns {Promise<void>}\n */\nexport async function pymLoader(fn) {\n  const pymChild = await getPymChild();\n\n  if (fn) {\n    const debouncedFn = debounce(() => {\n      fn();\n\n      pymChild.sendHeight();\n    }, 300);\n\n    window.addEventListener('resize', debouncedFn);\n    window.addEventListener('load', debouncedFn);\n\n    debouncedFn();\n  }\n}\n","/*\n USAGE (example: line chart)\n 1. c+p this template to a new file (line.js)\n 2. change puddingChartName to puddingChartLine\n 3. in graphic file: import './pudding-chart/line'\n 4a. const charts = d3.selectAll('.thing').data(data).puddingChartLine();\n 4b. const chart = d3.select('.thing').datum(datum).puddingChartLine();\n*/\nimport * as d3 from 'd3';\nimport mapData from '../../data/map.json';\n//import routeData from '../data/routes.json';\nimport { geoVoronoi } from 'd3-geo-voronoi';\nimport * as topojson from 'topojson';\nimport 'versor';\n\nd3.selection.prototype.map = function init(options) {\n  function createChart(el) {\n    const $sel = d3.select(el);\n    let data = $sel.datum();\n\n    data.usairports.forEach(d => {\n      d.incoming = 0;\n      d.outgoing = 0;\n      d.flights = [];\n    })\n    let iata = new Map(data.usairports.map(d => [d.IATA, d]))\n    data.usroutes.forEach(route => {\n      route.source = iata.get(route.ORIGIN);\n      route.target = iata.get(route.DEST);\n      route.source.outgoing += route.COUPONS;\n      route.target.incoming += route.COUPONS;\n    });\n    //data.usairports.sort((a, b) => d3.descending(a.outgoing, b.outgoing));\n    let airportsgeojson = data.usairports.map(airport => {\n      return {\n        type: \"Feature\",\n        properties: airport,\n        geometry: {\n          type: \"Point\",\n          coordinates: [airport.Longitude, airport.Latitude]\n        }\n      }\n    })\n    // dimension stuff\n    let width = 0;\n    let height = 0;\n    let scale = 0;\n    let hypotenuse = 0;\n\n    const marginTop = 0;\n    const marginBottom = 0;\n    const marginLeft = 0;\n    const marginRight = 0;\n\n    // scales\n    const scaleX = null;\n    const scaleY = null;\n    let radiusScale = d3.scaleSqrt()\n    let segmentScale = d3.scaleLinear()\n\n\n    // dom elements\n    let $svg = null;\n    let $axis = null;\n    let $vis = null;\n\n    let airports = null;\n    let airportG = null;\n\n    let bundle = null;\n    let flights = null;\n    let flight = null;\n\n    let voronoiLayer = null;\n\n    let canvas = null;\n    let context = null;\n\n    let projection = d3.geoAlbersUsa();\n\n    let canvasPath = d3.geoPath();\n    let svgPath = d3.geoPath();\n\n    let polygons = geoVoronoi()\n      .polygons(airportsgeojson);\n\n    let layout = d3.forceSimulation();\n\n    let line = d3.line()\n      .curve(d3.curveBundle)\n      .x(airport => airport.x)\n      .y(airport => airport.y);\n    //let line = \n    \n    const rotate = [110, -40];\n\n\n    // helper functions\n\n    const Chart = {\n      // called once at start\n      init() {\n        $svg = $sel.append('svg');\n        const $g = $svg.append('g');\n\n        canvas = $sel.append(\"canvas\");\n        context = canvas.node().getContext(\"2d\");\n\n\n        // offset chart for margins\n        $g.attr('transform', `translate(${marginLeft}, ${marginTop})`);\n\n        // create axis\n        $axis = $svg.append('g').attr('class', 'g-axis');\n\n        // setup viz group\n        $vis = $g.append('g').attr('class', 'g-vis');\n        airports = $g.append('g').attr(\"class\", \"airports\");\n        voronoiLayer = $g.append('g').attr(\"class\", \"voronoi-layer\");\n        flights = $g.append('g').attr(\"class\", \"flights\");\n\n        Chart.resize();\n        Chart.render();\n      },\n      // on resize, update new dimensions\n      resize() {\n        // defaults to grabbing dimensions from container element\n        width = $sel.node().offsetWidth - marginLeft - marginRight;\n        height = $sel.node().offsetHeight - marginTop - marginBottom;\n        $svg\n          \t.attr('width', width + marginLeft + marginRight)\n          \t.attr('height', height + marginTop + marginBottom);\n\n        canvas\n            .attr('width', width + marginLeft + marginRight)\n            .attr('height', height + marginTop + marginBottom);\n        \n        hypotenuse = Math.sqrt(width * width + height * height);\n\n        let outgoingMax = d3.max(data.usairports, d => d['outgoing'])\n        radiusScale\n          .domain([0, outgoingMax])\n          .range([width/1000,width/75])\n        \n        // segmentScale\n        //   .domain([0, hypotenuse])\n        //   .range([1, 10])\n        \n        projection\n          .scale(width * 1.28)\n          .translate([width / 2, height / 2]);\n\n        canvasPath\n          .projection(projection)\n          .context(context);\n\n        svgPath\n          .projection(projection)\n\n        data.usairports.forEach(airport => {\n          let coords = projection([airport.Longitude, airport.Latitude]);\n          airport.x = coords[0];\n          airport.y = coords[1];\n        })\n        \n        //voronoi.extent([[0, 0], [width, height]]);\n          \n\n        return Chart;\n      },\n      // update scales and render chart\n      render() {\n        \n\n        context.clearRect(0, 0, width, height);\n\n        // context.beginPath();\n        // path(topojson.mesh(mapData, mapData.objects.states, (a, b) => a !== b));\n        // context.lineWidth = 0.5 / scale;\n        // context.strokeStyle = \"#000\";\n        // context.stroke();\n\n        context.beginPath();\n        canvasPath(topojson.feature(mapData, mapData.objects.states))\n        context.fillStyle = \"#f5f5f5\";\n        context.fill();\n\n        context.beginPath();\n        canvasPath(topojson.mesh(mapData, mapData.objects.states, (a, b) => a !== b));\n        context.lineWidth = 1 * width / 960;\n        context.strokeStyle = \"#fff\";\n        context.stroke();\n\n        \n          \n        // context.beginPath();\n        // canvasPath(topojson.feature(mapData, mapData.objects.roads));\n        // context.lineWidth = 0.5 * width/960;\n        // context.strokeStyle = '#fff';\n        // context.stroke();\n\n        // context.beginPath();\n        // canvasPath(topojson.feature(mapData, mapData.objects.urban));\n        // context.fillStyle = \"#d3d3d3\";\n        // context.fill();\n\n        airportG = airports.selectAll(\".airport-g\")\n          .data(data.usairports, d => d.IATA)\n          .join(\"g\")\n          .attr(\"class\", \"airport-g\")\n          .attr(\"transform\", d => `translate(${d.x}, ${d.y})`)\n        \n        airportG.selectAll(\".airport\")\n          .data(d => [d])\n          .join(\"circle\")\n          .attr(\"class\", \"airport\")\n          .attr(\"r\", d => radiusScale(d.outgoing))\n          .each(function(d) {\n            d.bubble = this;\n          })\n\n        voronoiLayer.selectAll(\".airport-voronoi\")\n          .data(polygons.features)\n          .join(\"path\")\n          .attr(\"class\", \"airport-voronoi\")\n          .attr(\"d\", svgPath)\n          .on(\"mouseover\", d => {\n            //console.log(d)\n            let airport = d.properties.site.properties;\n            //console.log(airport.flights)\n            d3.select(airport.bubble)\n              .classed(\"highlight\", true);\n\n            d3.selectAll(airport.flights)\n              .classed(\"highlight\", true)\n              .raise();\n          })\n          .on(\"mouseout\", d => {\n            let airport = d.properties.site.properties;\n\n            d3.select(airport.bubble)\n              .classed(\"highlight\", false);\n\n            d3.selectAll(airport.flights)\n              .classed(\"highlight\", false);\n          })\n          //.data(d => voronoi.polygons())\n        // console.log(data.usroutes)\n        // bundle = generateSegments(data.usairports, data.usroutes)\n        flight = flights.selectAll(\".flight\")\n          .data(data.usroutes)\n          .join(\"path\")\n          // .attr(\"d\", d => {\n          //   let {x: sourceX, y: sourceY} = d.source;\n          //   let {x: targetX, y: targetY} = d.target\n          //   //console.log(sourceX)\n          //   // //let targetX = width * singerOffsetX;\n          //   // let sourceY = d.y + (d.category == 'parent' ? radius : -radius);\n          //   // let targetY = (height * singerOffsetY) + (d.category == 'parent' ? -singerRadius : singerRadius);\n          //   let dx = targetX - sourceX;\n          //   let dy = targetY - sourceY;\n          //   let dr = Math.sqrt(dx * dx + dy * dy);\n          //   return `M${sourceX},${sourceY}A${dr},${dr} 0 0,1 ${targetX},${targetY}`;\n          // })\n          .attr(\"d\", d => line([d.source, d.target]))\n          .attr(\"class\", d => {\n            //console.log(d)\n            return `flight`\n          })\n          .attr(\"data-origin\", d => d.ORIGIN)\n          .attr(\"data-dest\", d => d.DEST)\n          .attr(\"data-carrier\", d => d.OPERATING_CARRIER)\n          .each(function (d) {\n            // adds the path object to our source airport\n            // makes it fast to select outgoing paths\n            //console.log(d.sour)\n            d.source.flights.push(this);\n          });\n\n        // https://github.com/d3/d3-force\n        // layout\n        //   //.nodes(bundle.nodes)\n        //   .alphaDecay(0.1)\n        //   .force(\"charge\", d3.forceManyBody()\n        //     .strength(10)\n        //     .distanceMax(radiusScale.range()[1] * 2)\n        //   )\n        //   // edges want to be as short as possible\n        //   // prevents too much stretching\n        //   .force(\"link\", d3.forceLink()\n        //     .strength(0.7)\n        //     .distance(0)\n\n        //   )\n        //   .on(\"tick\", function (d) {\n        //     //console.log(flight.attr(\"d\"))\n        //     flight.attr(\"d\", line);\n        //   })\n        //   .on(\"end\", function (d) {\n        //     console.log(\"layout complete\");\n        //   });\n        // layout.nodes(data.usairports).force(\"link\").links(data.usroutes);\n        // console.log(bundle.nodes)\n        // console.log(bundle.links)\n        // console.log(bundle.paths)\n        //console.log(polygons)\n      // context.beginPath();\n      // path(topojson.feature(mapData, mapData.objects.roads));\n      // context.stroke();\n      // context.strokeStyle = '#fff';\n      // context.fillStyle = \"none\";\n      // context.fill();\n\n      // context.beginPath();\n      // path(topojson.feature(mapData, mapData.objects.world));\n      // context.stroke();\n      // context.fillStyle = '#fff';\n      // context.fill();\n\n        function generateSegments(nodes, links) {\n          // generate separate graph for edge bundling\n          // nodes: all nodes including control nodes\n          // links: all individual segments (source to target)\n          // paths: all segments combined into single path for drawing\n          let bundle = { nodes: [], links: [], paths: [] };\n\n          // make existing nodes fixed\n          bundle.nodes = nodes.map(function (d, i) {\n            d.fx = d.x;\n            d.fy = d.y;\n            return d;\n          });\n\n          links.forEach(function (d, i) {\n            // calculate the distance between the source and target\n            let length = distance(d.source, d.target);\n\n            // calculate total number of inner nodes for this link\n            let total = Math.round(segmentScale(length));\n\n            // create scales from source to target\n            let xscale = d3.scaleLinear()\n              .domain([0, total + 1]) // source, inner nodes, target\n              .range([d.source.x, d.target.x]);\n\n            let yscale = d3.scaleLinear()\n              .domain([0, total + 1])\n              .range([d.source.y, d.target.y]);\n\n            // initialize source node\n            let source = d.source;\n            let target = null;\n\n            // add all points to local path\n            let local = [source];\n\n            for (let j = 1; j <= total; j++) {\n              // calculate target node\n              target = {\n                x: xscale(j),\n                y: yscale(j)\n              };\n\n              local.push(target);\n              bundle.nodes.push(target);\n\n              bundle.links.push({\n                source: source,\n                target: target\n              });\n\n              source = target;\n            }\n\n            local.push(d.target);\n\n            // add last link to target node\n            bundle.links.push({\n              source: target,\n              target: d.target\n            });\n\n            bundle.paths.push(local);\n          });\n\n          return bundle;\n        }\n\t\t\n\n        return Chart;\n      },\n      // get / set data\n      data(val) {\n        if (!arguments.length) return data;\n        data = val;\n        $sel.datum(data);\n        Chart.resize();\n        Chart.render();\n        return Chart;\n      }\n    };\n    Chart.init();\n\n    return Chart;\n  }\n\n  // create charts\n  const charts = this.nodes().map(createChart);\n  return charts.length > 1 ? charts : charts.pop();\n};\n\n\n\nfunction distance(source, target) {\n  var dx2 = Math.pow(target.x - source.x, 2);\n  var dy2 = Math.pow(target.y - source.y, 2);\n\n  return Math.sqrt(dx2 + dy2);\n}","import { pymLoader } from '../embeds/pym';\nimport {\n  select,\n  selectAll,\n  datum\n} from 'd3-selection';\nimport { debounce } from 'lodash';\nimport data from '../../../data/data.json';\nimport '../map';\n\n// a reference to the default graphic container, change if needed\nconst container = select('#graphic');\n\n// a helper function to clear the container of its contents\nconst clearContainer = () => container.html('');\n\n// a helper function to grab the container's width\nconst getFrameWidth = () => container.node().offsetWidth;\nconst routes = data.usroutes;\nconst origins = data.origins;\nconst airports = data.usairports;\nconsole.log(data)\nconsole.log(airports)\nconst destinations = data.destinations;\n\nlet mapChart = null;\nlet card = null;\nlet carrier = null;\nlet origin = null;\nlet destination = null;\nlet selectedRoutes = null;\n\nlet possibleCarriers = null;\nlet possibleOrigins = null;\nlet possibleDestinations = null;\nlet possibleAirports = null;\n\nconst blankCarrier = {'REPORTING_CARRIER': '---', 'Name': '---'};\nconst blankAirport = {'Name': '---', 'City': '---', 'IATA': '---'};\n\nconst resize = () => {\n    mapChart.resize();\n    mapChart.render();\n}\n\n/**\n * This function is called to render a graphic by Pym.js. The frame's width and\n * a reference to the Pym instance is provided.\n *\n * @param  {Object} pymChild         A reference to the iframe's Pym instance\n * @return {void}\n */\nexport default function renderGraphic(pymChild) {\n  // uncomment these two lines if you're creating a coded graphic\n  clearContainer(); // clears the container\n  const frameWidth = getFrameWidth(); // calcuates the width on each render\n  console.log(data);\n  mapChart = select(\"#graphic\").datum(data).map();\n  window.addEventListener('resize', debounce(resize, 150));\n\n}\n\npymLoader(renderGraphic).catch(console.error);\n\nconst cardDropdown = document.getElementById('card-dropdown');\nconst carrierDropdown = document.getElementById('carrier-dropdown');\nconst originDropdown = document.getElementById('origin-dropdown');\nconst destinationDropdown = document.getElementById('destination-dropdown');\n\n// add change listener\ncardDropdown.addEventListener('change', event => {\n\n  const value = event.target.value;\n\n  // find the element that matches (value has # in it, so use querySelector instead)\n  //const match = document.querySelector(value);\n});\n\ncarrierDropdown.addEventListener('change', event => {\n\n  const el = event.target;\n  const value = el.value;\n  carrier = value;\n  console.log(carrier)\n  selectedRoutes = routes.filter(d => (origin != null ? d['ORIGIN'] == origin : true) &&\n    (destination != null ? d['DEST'] == destination : true) &&\n    (carrier != null ? d['OPERATING_CARRIER'] == carrier : true));\n\n  data.usroutes = selectedRoutes;\n  \n\n  possibleOrigins = [...new Set(selectedRoutes.map(d => d.ORIGIN))];\n  possibleDestinations = [...new Set(selectedRoutes.map(d => d.DEST))];\n  possibleAirports = [...possibleOrigins, ...possibleDestinations];\n\nconsole.log(airports)\n  data.origins = airports.filter(d => possibleOrigins.includes(d['IATA']));\n  data.destinations = destinations.filter(d => possibleDestinations.includes(d['IATA']));\n  data.usairports = airports.filter(d => possibleAirports.includes(d['IATA']));\n\n  // console.log(possibleOrigins)\n  // console.log(possibleDestinations)\n  console.log([blankAirport, ...data.origins])\n  select(originDropdown).selectAll(\"option\")\n    .data([blankAirport, ...data.origins])\n    .join(\n      enter => enter.append(\"option\")\n        .attr(\"value\", d => {\n          console.log(d)\n          return d.IATA\n        })\n        .text(d => d.Name),\n      update => update\n        .attr(\"value\", d => d.IATA)\n        .text(d => d.Name),\n      exit => exit\n        .remove()\n    );\n\n  \n  select(destinationDropdown).selectAll(\"option\")\n    .data([blankAirport, ...data.destinations])\n    .join(\n      enter => enter.append(\"option\")\n        .attr(\"value\", d => d.IATA)\n        .text(d => d.Name),\n      update => update\n        .attr(\"value\", d => d.IATA)\n        .text(d => d.Name),\n      exit => exit\n        .remove()\n      );\n\n\n  \n  mapChart.data(data);\n  // find the element that matches (value has # in it, so use querySelector instead)\n  //const match = document.querySelector(value);\n});\n\noriginDropdown.addEventListener('change', event => {\n  \n  const el = event.target;\n  const value = el.value;\n  origin = value;\n\n  selectedRoutes = routes.filter(d => (origin != null ? d['ORIGIN'] == origin : true) && \n  (destination != null ? d['DEST'] == destination : true) &&\n  (carrier!= null ? d['OPERATING_CARRIER'] == carrier : true));\n\n  data.usroutes = selectedRoutes;\n  \n  mapChart.data(data);\n  \n  // find the element that matches (value has # in it, so use querySelector instead)\n  //const match = document.querySelector(value);\n});\n\ndestinationDropdown.addEventListener('change', event => {\n\n  const el = event.target;\n  const value = el.value;\n  destination = value;\n\n  selectedRoutes = routes.filter(d => (origin != null ? d['ORIGIN'] == origin : true) &&\n    (destination != null ? d['DEST'] == destination : true) &&\n    (carrier != null ? d['OPERATING_CARRIER'] == carrier : true));\n  \n  data.usroutes = selectedRoutes;\n  \n  mapChart.data(data);\n});","export default function debounce(func, wait, immediate) {\n  var timeout, args, context, timestamp, result;\n\n  var later = function() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n\n  return function() {\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n}\n"],"sourceRoot":""}